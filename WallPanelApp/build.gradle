/*
 * Copyright (c) 2022 WallPanel
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed
 * under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'com.android.application'
    id 'com.github.sgtsilvio.gradle.android-retrofix'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt' // Allows for Kotlin annotation processors
    //id 'androidx.navigation.safeargs.kotlin'
    //id 'dagger.hilt.android.plugin'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}



def versionMajor = 0
def versionMinor = 10
def versionPatch = 0
def versionBuild = 1 // bump for dog food builds, public betas, etc.

def CODE() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("code")
}

def HASS_URL() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("hassUrl")
}

def BROKER() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("broker")
}

def BROKER_PASS() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("brokerPass")
}

def BROKER_USERNAME() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("brokerUsername")
}

android {
    kapt {
        generateStubs = true
        correctErrorTypes = true
    }
    compileSdkVersion 31
    buildToolsVersion "30.0.3"
    defaultConfig {
        applicationId "xyz.wallpanel.app"
        minSdkVersion 19
        targetSdkVersion 31
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}.${versionBuild}"
        multiDexEnabled true
        ndk.abiFilters 'armeabi-v7a','arm64-v8a','x86','x86_64'
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        viewBinding true
    }

    flavorDimensions "default"

    productFlavors {
        def BASE_ENVIRONMENT = "BASE_ENVIRONMENT"
        dev {
            dimension "default"
            buildConfigField "String", BASE_ENVIRONMENT, '"DEV_ENVIRONMENT"'
            applicationId "xyz.wallpanel.app"
            versionName "${versionMajor}.${versionMinor}.${versionPatch} Build ${versionBuild}-DEV"
            buildConfigField 'Integer', 'CODE', CODE()
            buildConfigField 'String', 'HASS_URL', "\"" + HASS_URL() +"\""
            buildConfigField 'String', 'BROKER', "\"" + BROKER() +"\""
            buildConfigField 'String', 'BROKER_PASS', "\"" + BROKER_PASS() +"\""
            buildConfigField 'String', 'BROKER_USERNAME', "\"" + BROKER_USERNAME() +"\""
        }
        qa {
            dimension "default"
            buildConfigField "String", BASE_ENVIRONMENT, '"QA_ENVIRONMENT"'
            applicationId "xyz.wallpanel.app"
            versionName "${versionMajor}.${versionMinor}.${versionPatch} Build ${versionBuild}-QA"
        }
        prod {
            dimension "default"
            buildConfigField "String", BASE_ENVIRONMENT, '"PROD_ENVIRONMENT"'
            applicationId "xyz.wallpanel.app"
            versionName "${versionMajor}.${versionMinor}.${versionPatch} Build ${versionBuild}"
            buildConfigField 'Integer', 'CODE', '1234'
            buildConfigField 'String', 'HASS_URL', '""'
            buildConfigField 'String', 'BROKER', '""'
            buildConfigField 'String', 'BROKER_USERNAME', '""'
            buildConfigField 'String', 'BROKER_PASS', '""'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/INDEX.LIST', 'META-INF/io.netty.versions.properties']
        }
    }
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.legacy:legacy-support-v13:1.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.legacy:legacy-preference-v14:1.0.0'
    implementation 'androidx.preference:preference-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'
    implementation 'com.google.android.gms:play-services-vision:20.1.3'

    // Navigation
    implementation 'androidx.navigation:navigation-fragment-ktx:2.4.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.4.2'

    // RxJava
    implementation 'io.reactivex.rxjava2:rxjava:2.2.19'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'

    // LiveData + ViewModel
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation 'com.google.firebase:firebase-analytics:20.1.2'
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$versions.lifecycle"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycle"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$versions.retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$versions.retrofit"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$versions.retrofit"

    // OKHttp
    implementation 'com.squareup.okhttp3:logging-interceptor:3.4.1'
    implementation 'com.squareup.okhttp3:okhttp:3.14.9'

    // Dagger
    implementation "com.google.dagger:dagger:$versions.dagger"
    annotationProcessor "com.google.dagger:dagger-compiler:$versions.dagger"
    implementation "com.google.dagger:dagger-android-support:$versions.dagger"
    kapt "com.google.dagger:dagger-compiler:$versions.dagger"
    implementation "com.google.dagger:dagger-android:$versions.dagger"
    annotationProcessor "com.google.dagger:dagger-android-processor:$versions.dagger"
    kapt "com.google.dagger:dagger-android-processor:$versions.dagger"

    // MQTT
    implementation 'com.hivemq:hivemq-mqtt-client:1.3.0'
    implementation 'com.koushikdutta.async:androidasync:2.1.9'
    implementation 'net.sourceforge.streamsupport:android-retrostreams:1.7.4'
    implementation 'net.sourceforge.streamsupport:android-retrofuture:1.7.4'

    // Logging
    implementation 'com.jakewharton.timber:timber:4.7.1'

    // Picasso image loading
    implementation 'com.squareup.picasso:picasso:2.71828'

    // Glide for image loading
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'

    //  _____ _          _
    // |  ___(_)_ __ ___| |__   __ _ ___  ___
    // | |_  | | '__/ _ \ '_ \ / _` / __|/ _ \
    // |  _| | | | |  __/ |_) | (_| \__ \  __/
    // |_|   |_|_|  \___|_.__/ \__,_|___/\___|
    //
    implementation 'com.google.firebase:firebase-core:20.1.2'

    // Import the BoM for the Firebase platform
    implementation platform('com.google.firebase:firebase-bom:29.3.1')

    // Declare the dependencies for the Crashlytics and Analytics libraries
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-crashlytics-ktx'

    // Unit tests
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestUtil 'androidx.test:orchestrator:1.4.1'

}

configurations.all {
    resolutionStrategy {
        force "com.android.support:appcompat-v7:$versions.support"
    }
}

/*configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion '25.3.0'
            }
        }
    }
}*/
